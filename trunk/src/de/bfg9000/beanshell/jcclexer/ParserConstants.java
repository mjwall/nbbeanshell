/*
 * nbBeanShell -- a integration of BeanScript into the NetBeans IDE
 * Copyright (C) 2011 Thomas Werner
 *
 * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any
 * later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package de.bfg9000.beanshell.jcclexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int NONPRINTABLE = 2;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 3;
  /** RegularExpression Id. */
  int HASH_BANG_COMMENT = 4;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int ABSTRACT = 6;
  /** RegularExpression Id. */
  int BOOLEAN = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int CLASS = 9;
  /** RegularExpression Id. */
  int BYTE = 10;
  /** RegularExpression Id. */
  int CASE = 11;
  /** RegularExpression Id. */
  int CATCH = 12;
  /** RegularExpression Id. */
  int CHAR = 13;
  /** RegularExpression Id. */
  int CONST = 14;
  /** RegularExpression Id. */
  int CONTINUE = 15;
  /** RegularExpression Id. */
  int _DEFAULT = 16;
  /** RegularExpression Id. */
  int DO = 17;
  /** RegularExpression Id. */
  int DOUBLE = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int ENUM = 20;
  /** RegularExpression Id. */
  int EXTENDS = 21;
  /** RegularExpression Id. */
  int FALSE = 22;
  /** RegularExpression Id. */
  int FINAL = 23;
  /** RegularExpression Id. */
  int FINALLY = 24;
  /** RegularExpression Id. */
  int FLOAT = 25;
  /** RegularExpression Id. */
  int FOR = 26;
  /** RegularExpression Id. */
  int GOTO = 27;
  /** RegularExpression Id. */
  int IF = 28;
  /** RegularExpression Id. */
  int IMPLEMENTS = 29;
  /** RegularExpression Id. */
  int IMPORT = 30;
  /** RegularExpression Id. */
  int INSTANCEOF = 31;
  /** RegularExpression Id. */
  int INT = 32;
  /** RegularExpression Id. */
  int INTERFACE = 33;
  /** RegularExpression Id. */
  int LONG = 34;
  /** RegularExpression Id. */
  int NATIVE = 35;
  /** RegularExpression Id. */
  int NEW = 36;
  /** RegularExpression Id. */
  int NULL = 37;
  /** RegularExpression Id. */
  int PACKAGE = 38;
  /** RegularExpression Id. */
  int PRIVATE = 39;
  /** RegularExpression Id. */
  int PROTECTED = 40;
  /** RegularExpression Id. */
  int PUBLIC = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int SHORT = 43;
  /** RegularExpression Id. */
  int STATIC = 44;
  /** RegularExpression Id. */
  int STRICTFP = 45;
  /** RegularExpression Id. */
  int SWITCH = 46;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 47;
  /** RegularExpression Id. */
  int TRANSIENT = 48;
  /** RegularExpression Id. */
  int THROW = 49;
  /** RegularExpression Id. */
  int THROWS = 50;
  /** RegularExpression Id. */
  int TRUE = 51;
  /** RegularExpression Id. */
  int TRY = 52;
  /** RegularExpression Id. */
  int VOID = 53;
  /** RegularExpression Id. */
  int VOLATILE = 54;
  /** RegularExpression Id. */
  int WHILE = 55;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 56;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 57;
  /** RegularExpression Id. */
  int HEX_LITERAL = 58;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 59;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 60;
  /** RegularExpression Id. */
  int EXPONENT = 61;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 62;
  /** RegularExpression Id. */
  int STRING_LITERAL = 63;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 64;
  /** RegularExpression Id. */
  int IDENTIFIER = 65;
  /** RegularExpression Id. */
  int LETTER = 66;
  /** RegularExpression Id. */
  int DIGIT = 67;
  /** RegularExpression Id. */
  int LPAREN = 68;
  /** RegularExpression Id. */
  int RPAREN = 69;
  /** RegularExpression Id. */
  int LBRACE = 70;
  /** RegularExpression Id. */
  int RBRACE = 71;
  /** RegularExpression Id. */
  int LBRACKET = 72;
  /** RegularExpression Id. */
  int RBRACKET = 73;
  /** RegularExpression Id. */
  int SEMICOLON = 74;
  /** RegularExpression Id. */
  int COMMA = 75;
  /** RegularExpression Id. */
  int DOT = 76;
  /** RegularExpression Id. */
  int ASSIGN = 77;
  /** RegularExpression Id. */
  int GT = 78;
  /** RegularExpression Id. */
  int GTX = 79;
  /** RegularExpression Id. */
  int LT = 80;
  /** RegularExpression Id. */
  int LTX = 81;
  /** RegularExpression Id. */
  int BANG = 82;
  /** RegularExpression Id. */
  int TILDE = 83;
  /** RegularExpression Id. */
  int HOOK = 84;
  /** RegularExpression Id. */
  int COLON = 85;
  /** RegularExpression Id. */
  int EQ = 86;
  /** RegularExpression Id. */
  int LE = 87;
  /** RegularExpression Id. */
  int LEX = 88;
  /** RegularExpression Id. */
  int GE = 89;
  /** RegularExpression Id. */
  int GEX = 90;
  /** RegularExpression Id. */
  int NE = 91;
  /** RegularExpression Id. */
  int BOOL_OR = 92;
  /** RegularExpression Id. */
  int BOOL_ORX = 93;
  /** RegularExpression Id. */
  int BOOL_AND = 94;
  /** RegularExpression Id. */
  int BOOL_ANDX = 95;
  /** RegularExpression Id. */
  int INCR = 96;
  /** RegularExpression Id. */
  int DECR = 97;
  /** RegularExpression Id. */
  int PLUS = 98;
  /** RegularExpression Id. */
  int MINUS = 99;
  /** RegularExpression Id. */
  int STAR = 100;
  /** RegularExpression Id. */
  int SLASH = 101;
  /** RegularExpression Id. */
  int BIT_AND = 102;
  /** RegularExpression Id. */
  int BIT_ANDX = 103;
  /** RegularExpression Id. */
  int BIT_OR = 104;
  /** RegularExpression Id. */
  int BIT_ORX = 105;
  /** RegularExpression Id. */
  int XOR = 106;
  /** RegularExpression Id. */
  int MOD = 107;
  /** RegularExpression Id. */
  int LSHIFT = 108;
  /** RegularExpression Id. */
  int LSHIFTX = 109;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 110;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTX = 111;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 112;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTX = 113;
  /** RegularExpression Id. */
  int PLUSASSIGN = 114;
  /** RegularExpression Id. */
  int MINUSASSIGN = 115;
  /** RegularExpression Id. */
  int STARASSIGN = 116;
  /** RegularExpression Id. */
  int SLASHASSIGN = 117;
  /** RegularExpression Id. */
  int ANDASSIGN = 118;
  /** RegularExpression Id. */
  int ANDASSIGNX = 119;
  /** RegularExpression Id. */
  int ORASSIGN = 120;
  /** RegularExpression Id. */
  int ORASSIGNX = 121;
  /** RegularExpression Id. */
  int XORASSIGN = 122;
  /** RegularExpression Id. */
  int MODASSIGN = 123;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 124;
  /** RegularExpression Id. */
  int LSHIFTASSIGNX = 125;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 126;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGNX = 127;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 128;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGNX = 129;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<NONPRINTABLE>",
    "<SINGLE_LINE_COMMENT>",
    "<HASH_BANG_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"class\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"transient\"",
    "\"throw\"",
    "\"throws\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<FORMAL_COMMENT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"@gt\"",
    "\"<\"",
    "\"@lt\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\"@lteq\"",
    "\">=\"",
    "\"@gteq\"",
    "\"!=\"",
    "\"||\"",
    "\"@or\"",
    "\"&&\"",
    "\"@and\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"@bitwise_and\"",
    "\"|\"",
    "\"@bitwise_or\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"@left_shift\"",
    "\">>\"",
    "\"@right_shift\"",
    "\">>>\"",
    "\"@right_unsigned_shift\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"@and_assign\"",
    "\"|=\"",
    "\"@or_assign\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\"@left_shift_assign\"",
    "\">>=\"",
    "\"@right_shift_assign\"",
    "\">>>=\"",
    "\"@right_unsigned_shift_assign\"",
  };

}
